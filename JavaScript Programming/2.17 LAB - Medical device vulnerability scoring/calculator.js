const radioButtons = document.querySelectorAll('input[type="radio"]');
radioButtons.forEach(radio => {
  radio.addEventListener('change', updateScore);
});

function updateScore() {
    const AVSelected = document.querySelector('input[name="AV"]:checked');
    const ACSelected = document.querySelector('input[name="AC"]:checked');
    const PRSelected = document.querySelector('input[name="PR"]:checked');
    const UISelected = document.querySelector('input[name="UI"]:checked');
    const scopeSelected = document.querySelector('input[name="scope"]:checked');
    const confSelected = document.querySelector('input[name="conf"]:checked');
    const integSelected = document.querySelector('input[name="integ"]:checked');
    const availSelected = document.querySelector('input[name="avail"]:checked');
    const healthSelected = document.querySelector('input[name="health"]:checked');
    const sensSelected = document.querySelector('input[name="sens"]:checked');
 
    if (AVSelected && ACSelected && PRSelected && UISelected && scopeSelected && confSelected &&integSelected && availSelected &&healthSelected && sensSelected) {
        document.getElementById("warning").style.display = "none"
        //compute score
  
        if (scopeSelected.value === "scope_U") {
            scopeStatus = 1;
        } else {
            scopeStatus = 1.08;
        }

        if (sensSelected.value === "sens_N" && confSelected.value === "conf_N") {
            baseConfidentiality = 0;
        } else if
            (sensSelected.value === "sens_N" && confSelected.value === "conf_L") {
                baseConfidentiality = 0.22;
        } else if
            (sensSelected.value === "sens_N" && confSelected.value === "conf_H") {
                baseConfidentiality = 0.56;
        } else if 
            (sensSelected.value === "sens_L" && confSelected.value === "conf_N") {
                baseConfidentiality = 0.55;
        } else if
            (sensSelected.value === "sens_L" && confSelected.value === "conf_L") {
                baseConfidentiality = 0.60;
        } else if
            (sensSelected.value === "sens_L" && confSelected.value === "conf_H") {
                baseConfidentiality = 0.75;
        } else if
            (sensSelected.value === "sens_H" && confSelected.value === "conf_L") {
                baseConfidentiality = 0.85;
        } else if
            (sensSelected.value === "sens_H" && confSelected.value === "conf_H") {
                baseConfidentiality = 0.90;
        } else {
            baseConfidentiality = 0.95;
        }

        if (healthSelected.value === "health_N" && integSelected.value === "integ_N") {
            baseIntegrity = 0;
        } else if
            (healthSelected.value === "health_N" && integSelected.value === "integ_L") {
                baseIntegrity = 0.22;
        } else if
            (healthSelected.value === "health_N" && integSelected.value === "integ_H") {
                baseIntegrity = 0.56;
        } else if 
            (healthSelected.value === "health_L" && integSelected.value === "integ_N") {
                baseIntegrity = 0.55;
        } else if
            (healthSelected.value === "health_L" && integSelected.value === "integ_L") {
                baseIntegrity = 0.60;
        } else if
            (healthSelected.value === "health_L" && integSelected.value === "integ_H") {
                baseIntegrity = 0.75;
        } else if
            (healthSelected.value === "health_H" && integSelected.value === "integ_L") {
                baseIntegrity = 0.85;
        } else if
            (healthSelected.value === "health_H" && integSelected.value === "integ_H") {
                baseIntegrity = 0.90;
        } else {
            baseIntegrity = 0.95;
        }
        
        if (healthSelected.value === "health_N" && availSelected.value === "avail_N") {
            baseAvailability = 0;
        } else if
            (healthSelected.value === "health_N" && availSelected.value === "avail_L") {
                baseAvailability = 0.22;
        } else if
            (healthSelected.value === "health_N" && availSelected.value === "avail_H") {
                baseAvailability = 0.56;
        } else if 
            (healthSelected.value === "health_L" && availSelected.value === "avail_N") {
                baseAvailability = 0.55;
        } else if
            (healthSelected.value === "health_L" && availSelected.value === "avail_L") {
                baseAvailability = 0.60;
        } else if
            (healthSelected.value === "health_L" && availSelected.value === "avail_H") {
                baseAvailability = 0.75;
        } else if
            (healthSelected.value === "health_H" && availSelected.value === "avail_L") {
                baseAvailability = 0.85;
        } else if
            (healthSelected.value === "health_H" && availSelected.value === "avail_H") {
                baseAvailability = 0.90;
        } else {
                 baseAvailability = 0.95;
        }    

        scoreBase = baseConfidentiality + baseIntegrity + baseAvailability
        if (scoreBase === 0) {
            scoreFinal = 0.0
        } else {
            switch (AVSelected.value) {
            case "AV_N":
                attackVector = 0.85;
                break;
            case "AV_A":
                attackVector = 0.62;
                break;
            case "AV_L":
                attackVector = 0.55;
                break;
            default:
                attackVector = 0.20;
            }
        
            if (ACSelected.value === "AC_L"){
                attackComplexity = 0.77;
            } else {
                attackComplexity = 0.44;
            }

            switch (PRSelected.value) {
                case "PR_N":
                    privilegedRequired = 0.85;
                    break;
                case "PR_L":
                    privilegedRequired = 0.62;
                    break;
                default:
                    privilegedRequired = 0.27;
            }

            if (UISelected.value === "UI_N") {
                userInteraction = 0.85;
            } else {
                userInteraction = 0.62;
            }
            scoreExploitability = attackVector * attackComplexity * privilegedRequired * userInteraction

            scoreFinal = (scopeStatus) * ((3.326258589 * scoreBase) + (1.1 * scoreExploitability))

        }
        roundedScore = Math.ceil(scoreFinal * 10) / 10  
        document.querySelector(".score").innerHTML = roundedScore.toFixed(1);

    }
}
 
 
    
